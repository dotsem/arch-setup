#!/usr/bin/env bash
# Après-Setup - Background installer for non-essential packages
# Runs after the initial system setup, can be paused and resumed

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROGRESS_FILE="$HOME/.cache/apres-setup-progress"
LOG_FILE="$HOME/.cache/apres-setup.log"
LOCK_FILE="$HOME/.cache/apres-setup.lock"
PID_FILE="$HOME/.cache/apres-setup.pid"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Load package lists
source "$SCRIPT_DIR/../config/packages-nonessential.sh"
source "$SCRIPT_DIR/../helpers/logging.sh"

# Initialize
mkdir -p "$(dirname "$PROGRESS_FILE")"
mkdir -p "$(dirname "$LOG_FILE")"

# Check if already running
check_if_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            echo -e "${YELLOW}Après-setup is already running (PID: $pid)${NC}"
            echo "Use 'apres-setup status' to check progress"
            echo "Use 'apres-setup stop' to stop it"
            exit 1
        else
            # Stale PID file
            rm -f "$PID_FILE"
        fi
    fi
}

# Save progress
save_progress() {
    local completed="$1"
    echo "$completed" > "$PROGRESS_FILE"
}

# Load progress
load_progress() {
    if [ -f "$PROGRESS_FILE" ]; then
        cat "$PROGRESS_FILE"
    else
        echo "0"
    fi
}

# Install a package
install_package() {
    local type="$1"
    local package="$2"
    
    log "INFO" "[APRES] Installing $package via $type"
    
    case "$type" in
        pacman)
            sudo -n pacman -S --noconfirm --needed "$package" >> "$LOG_FILE" 2>&1
            return $?
            ;;
        yay)
            yay -S --noconfirm --needed "$package" >> "$LOG_FILE" 2>&1
            return $?
            ;;
        flatpak)
            flatpak install -y flathub "$package" >> "$LOG_FILE" 2>&1
            return $?
            ;;
    esac
}

# Calculate total packages
calculate_total() {
    local total=0
    total=$((total + ${#NONESSENTIAL_PACMAN_PACKAGES[@]}))
    total=$((total + ${#NONESSENTIAL_AUR_PACKAGES[@]}))
    total=$((total + ${#NONESSENTIAL_FLATPAK_PACKAGES[@]}))
    echo "$total"
}

# Run installation
run_installation() {
    local completed=$(load_progress)
    local total=$(calculate_total)
    local current=0
    local failed=0
    
    echo -e "${BLUE}Starting après-setup installation...${NC}"
    echo -e "Progress will be saved to: $PROGRESS_FILE"
    echo -e "Logs will be saved to: $LOG_FILE\n"
    
    # Install pacman packages
    for pkg in "${NONESSENTIAL_PACMAN_PACKAGES[@]}"; do
        ((current++))
        
        if [ $current -le $completed ]; then
            continue
        fi
        
        echo -e "${YELLOW}[$current/$total]${NC} Installing $pkg (pacman)..."
        
        if install_package "pacman" "$pkg"; then
            echo -e "${GREEN}✓${NC} $pkg installed"
            save_progress "$current"
        else
            echo -e "${RED}✗${NC} $pkg failed"
            ((failed++))
            save_progress "$current"
        fi
    done
    
    # Install AUR packages
    for pkg in "${NONESSENTIAL_AUR_PACKAGES[@]}"; do
        ((current++))
        
        if [ $current -le $completed ]; then
            continue
        fi
        
        echo -e "${YELLOW}[$current/$total]${NC} Installing $pkg (AUR)..."
        
        if install_package "yay" "$pkg"; then
            echo -e "${GREEN}✓${NC} $pkg installed"
            save_progress "$current"
        else
            echo -e "${RED}✗${NC} $pkg failed"
            ((failed++))
            save_progress "$current"
        fi
    done
    
    # Install Flatpak packages
    for pkg in "${NONESSENTIAL_FLATPAK_PACKAGES[@]}"; do
        ((current++))
        
        if [ $current -le $completed ]; then
            continue
        fi
        
        echo -e "${YELLOW}[$current/$total]${NC} Installing $pkg (Flatpak)..."
        
        if install_package "flatpak" "$pkg"; then
            echo -e "${GREEN}✓${NC} $pkg installed"
            save_progress "$current"
        else
            echo -e "${RED}✗${NC} $pkg failed"
            ((failed++))
            save_progress "$current"
        fi
    done
    
    # Run system tests
    echo -e "\n${BLUE}Running system tests...${NC}"
    if [ -f "$SCRIPT_DIR/sysunit" ]; then
        bash "$SCRIPT_DIR/sysunit"
    fi
    
    # Completion
    echo -e "\n${GREEN}Après-setup completed!${NC}"
    echo -e "Installed: $((total - failed))/$total packages"
    
    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}$failed packages failed to install${NC}"
        echo -e "Check log: $LOG_FILE"
    fi
    
    # Clean up
    rm -f "$PROGRESS_FILE" "$PID_FILE"
}

# Show status
show_status() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            local completed=$(load_progress)
            local total=$(calculate_total)
            local percentage=$((completed * 100 / total))
            
            echo -e "${GREEN}Après-setup is running${NC}"
            echo -e "PID: $pid"
            echo -e "Progress: $completed/$total ($percentage%)"
            echo -e "Log file: $LOG_FILE"
            return 0
        else
            echo -e "${YELLOW}Après-setup was running but the process died${NC}"
            echo -e "Last progress: $(load_progress)/$(calculate_total)"
            rm -f "$PID_FILE"
            return 1
        fi
    elif [ -f "$PROGRESS_FILE" ]; then
        local completed=$(load_progress)
        local total=$(calculate_total)
        
        if [ $completed -eq $total ]; then
            echo -e "${GREEN}Après-setup completed${NC}"
            return 0
        else
            echo -e "${YELLOW}Après-setup paused${NC}"
            echo -e "Progress: $completed/$total"
            echo -e "Run 'apres-setup start' to resume"
            return 0
        fi
    else
        echo -e "${YELLOW}Après-setup not started${NC}"
        echo -e "Run 'apres-setup start' to begin"
        return 0
    fi
}

# Stop installation
stop_installation() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            echo -e "${YELLOW}Stopping après-setup (PID: $pid)...${NC}"
            kill "$pid"
            rm -f "$PID_FILE"
            echo -e "${GREEN}Après-setup stopped${NC}"
            echo -e "Progress saved. Run 'apres-setup start' to resume."
        else
            echo -e "${YELLOW}Process not running${NC}"
            rm -f "$PID_FILE"
        fi
    else
        echo -e "${YELLOW}Après-setup is not running${NC}"
    fi
}

# Reset progress
reset_progress() {
    echo -e "${YELLOW}Resetting après-setup progress...${NC}"
    rm -f "$PROGRESS_FILE" "$PID_FILE"
    echo -e "${GREEN}Progress reset${NC}"
}

# Usage
usage() {
    echo "Usage: apres-setup [command]"
    echo ""
    echo "Commands:"
    echo "  start      Start/resume installation in background"
    echo "  status     Show installation status"
    echo "  stop       Stop background installation"
    echo "  reset      Reset progress and start over"
    echo "  log        Show installation log"
    echo "  help       Show this help message"
}

# Main
main() {
    local command="${1:-start}"
    
    case "$command" in
        start)
            check_if_running
            echo "$$" > "$PID_FILE"
            run_installation
            ;;
        status)
            show_status
            ;;
        stop)
            stop_installation
            ;;
        reset)
            reset_progress
            ;;
        log)
            if [ -f "$LOG_FILE" ]; then
                less "$LOG_FILE"
            else
                echo -e "${YELLOW}No log file found${NC}"
            fi
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            echo -e "${RED}Unknown command: $command${NC}"
            usage
            exit 1
            ;;
    esac
}

# Run if executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi
